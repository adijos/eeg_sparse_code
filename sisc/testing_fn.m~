function testing_fn()

% get default parameters
pars = default_pars(struct);
pars.basis_M = 50; % time window of basis (500hz -> 1s)
pars.basis_N = 1; % time of bases 1 dimensional
pars.num_bases = 20; % 20 basis elements to learn (made 20 so diff from 16)
pars.patch_M = 400; % time window of patches (500hz -> 5s)
pars.patch_N = 1; % time patches 1 dimensional
num_pre_data_files = 20; % ONE FOR TESTING!
coef_pars = default_coef_pars(struct);

patch_M = pars.patch_M;
patch_N = pars.patch_N;
num_channels = 16; % 16 "channels" or electrodes
num_patches = 100; % number of patches
num_trials = 100;

base_file_pre = './data/Dog_2/Dog_2_preictal_segment_00';

% Generate white noise bases, normalize
rand('seed', 100);
A = randn(pars.basis_M,pars.basis_N,num_channels,pars.num_bases);

% normalize over the basis elements!
for m=1:pars.num_bases,
    A(:,:,:,m)=A(:,:,:,m)-mean(mean(mean(A(:,:,:,m)))); % mean 0
    A(:,:,:,m)=A(:,:,:,m)/sqrt(mean(mean(mean(A(:,:,:,m).^2)))); % norm 1
end


% Main loop
% if reshaped, S = patch_M x patch_N x (number of bases)
% in our case, S = 2500 x 1 x 20
% must be 2-D for sparse matrix representation
s_all = sparse(patch_M*patch_N*pars.num_bases,num_patches); 
total_time = 0;
lambda = ones(pars.num_bases,1);

% over loop
% load random raw data file structure
% take data field from large struct
% take data from inner struct

for i = 1:num_pre_data_files
    sprintf(strcat('Data File #', int2str(i)))
    
    if i < 10
        datatr = load(strcat(base_file_pre,'0',int2str(i)));
        datate = load(strcat(ba
    else
        datatr = load(strcat(base_file_pre, int2str(i)));
    end
    data = getfield(datatr, strcat('preictal_segment_', int2str(i)));
    testy = getfield(data, strcat('preictal_segment_', int2str(num_pre_data_files+i)));
    eeg = data.data';
    eeg_t = testy.data';
    
    % reshape so eeg is...
    % size(eeg) = (number of time points) x (1d time) x (16 channels) x (1
    % image)
    % i.e. size(eeg) = T x 1 x 16 x 1 
    eeg = reshape(eeg,[size(eeg,1) 1 size(eeg,2) 1]);
    [M, N, num_channels, num_data] = size(eeg);
    
    eeg_t = reshape(eeg_t,[size(eeg,1) 1 size(eeg_t,2) 1]);
    %[M, N, num_channels, num_data] = size(eeg_t);
    
    
    % make eeg data zero mean, unit variance
    eeg = eeg - mean(mean(mean(mean(eeg))));
    eeg = eeg/sqrt(mean(mean(mean(mean(eeg.^2)))));
    
    
%     % Make images zero mean, unit variance
%     for ind=1:size(IMAGES,4),
%         IMAGES(:,:,ind) = IMAGES(:,:,ind)-mean(mean(IMAGES(:,:,ind)));
%         IMAGES(:,:,ind) = IMAGES(:,:,ind)/sqrt(mean(mean(IMAGES(:,:,ind).^2)));
%     end
    
    % extract 100 random patches from data
    % loop over range(num_trials=100) and choose random patches accordingly
    % patches should be X_ALL M x N x num_channels x num_patches
    % in our case ..........  T x 1 x 16 x (random large number)
    idxs = randi(size(eeg, 1) - patch_M,100);
    X_ALL_train = zeros(patch_M,patch_N,num_channels,num_patches);
    for nummy=1:num_patches;
        index = idxs(nummy);
        data = eeg(index:index + patch_M - 1, :, :, 1);
        X_ALL_train(:,:,:,nummy) = data;
    end
    
    %error('sleepeh brah')
    [A,batch_stats,lambda,s_all] = run_batcheeg(X_ALL_train,A,pars,coef_pars,1,true,lambda,s_all);
    
%     if pars.display_bases_every ~= 0 && mod(i,pars.display_bases_every)==0,
%         display_bases(A,1);
%         drawnow;
%     end

    idxt = randi(size(eeg_t, 1) - patch_M,100);
    X_ALL_test = zeros(patch_M,patch_N,num_channels,num_patches);
    for nummy=1:num_patches;
        index = idxt(nummy);
        data = eeg_t(index:index + patch_M - 1, :, :, 1);
        X_ALL_test(:,:,:,nummy) = data;
    end
    
    dummy_pars = coef_pars;
    dummy_pars.exact = true;
    dummy_pars.coeff_iter = 10000;
    dummy_pars.num_coords = 100;
    [A,batch_stats] = run_batch(X_ALL_test,A,pars,dummy_pars,0,false);
    fobj_all(tr) = batch_stats.fobj_pre_total;
    figure(2); plot(fobj_all); title('Objective function by batch.');
    figure(3); plot(train_time,fobj_all); title('Objective function by time.');
    drawnow;
    
    if pars.display_bases_every ~= 0 && mod(i,pars.display_bases_every)==0,
        figure(1000)
        for channel=1:16;
            subplot(4,4,channel);
            hold all
            for basis=1:pars.num_bases;
                plot(A(:,1,channel,basis));
            end
        end
        suptitle('all bases on all channels')
        
        figure(1234)
        choice = 7;
        for channel=1:16;
            subplot(4,4,channel);
            plot(A(:,1,channel,choice))
        end
        suptitle(['all channels of basis element ',int2str(choice)]);
    end

end
end